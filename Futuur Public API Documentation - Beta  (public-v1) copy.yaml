openapi: 3.0.3
info:
  title: 'Futuur Public API Documentation - Beta '
  version: v1 (public-v1)
  description: |2

    Welcome to the **Futuur Public API Documentation (Version 1)**. This document provides essential
    information about how to effectively use the Futuur public REST API.

    Our Public API allows you to harness the power of the Futuur platform within your own applications,
    products, or services.

    To use the Futuur Public API, you need to request an **API KEY** pair (public/private) on your
    [Account settings](https://futuur.com/a/settings) on the "Public API" section.

    The base URL of the API is: `https://api.futuur.com/api/v1/`

    ### Rate Limiting
    To ensure the quality and accessibility of our API, we enforce certain rate limits per user.
    The limit rates are the following per user:

    * **1000 requests / minute**
    * **10000 requests / day**

    Please be aware that exceeding these limits may result in your access to the API being temporarily suspended.

    For more detailed information about the various available endpoints, the expected input parameters, the response
    format, error codes to anticipate, and more, please refer to our detailed API documentation or contact our
    support team at support@futuur.com.

    P.S.: Any attempt to submit the same post request within less than 1 second will result in an 'wager_action_duplicated' error code.

    ### **Authentication**

    Most Futuur API endpoints require authentication,
    **except for the `questions` and `categories` endpoints, which are publicly accessible**.

    - `/markets/`
    - `/markets/<built-in function id>/`
    - `/categories/`
    - `/categories/<built-in function id>/`
    - `/categories/root/`
    - `/categories/root_and_main_children/`

    Authentication is performed using your API key and is secured by a SHA-512 HMAC.
    Each request must **include the following headers**:
    **except for the `questions` and `categories` endpoints, which are publicly accessible**.

    - **Key**: This is your **PUBLIC KEY**
    - **Timestamp**: The current timestamp in Unix format
    - **HMAC**: A SHA-512 hexdigest hash of the request signed with your **PRIVATE KEY**

    ### **How to Generate the HMAC**

    The HMAC signature is created from the full raw headers, POST, and GET data of your request, ordered alphabetically by its keys. This means that the input for your HMAC generation will depend on the specifics of your request.

    For instance, if you are making a request to `markets/?category=5`, you must generate a SHA-512 hash from the following params:

    ```
    category=5&Key={your_public_key}&Timestamp={current_timestamp}
    ```
    ### **Python Example**

    Here's a Python example illustrating how you can generate the HMAC:
    ```python
    import hashlib
    import hmac
    import datetime
    import requests
    from collections import OrderedDict
    from urllib.parse import urlencode

    PRIVATE_KEY = 'my_super_secret_private_key'
    PUBLIC_KEY = 'my_public_key'
    BASE_URL = 'https://api.futuur.com/api/v1/'
    def build_signature(params: dict):
        params_to_sign = OrderedDict(sorted(list(params.items())))

        params_to_sign = urlencode(params_to_sign)

        encoded_params = params_to_sign.encode('utf-8')
        encoded_private_key = PRIVATE_KEY.encode('utf-8')

        data = {
            'hmac': hmac.new(encoded_private_key, encoded_params, hashlib.sha512).hexdigest(),
            'Timestamp': params['Timestamp']
        }

        return data


    def build_headers(params: dict):
        signature = build_signature(params)
        headers = {
            'Key': PUBLIC_KEY,
            'Timestamp': str(signature.get('Timestamp')),
            'HMAC': signature.get('hmac')
        }
        return headers


    signature = build_signature({
        'Key': PUBLIC_KEY,
        'Timestamp': int(datetime.datetime.utcnow().timestamp()),
        'category': 5
    })


    headers = build_headers({
        'Key': PUBLIC_KEY,
        'Timestamp': int(datetime.datetime.utcnow().timestamp()),
        'category': 5
    })
    ```

    ### **call_api() Function**

    Here is a python example of a function which could call all endpoints:

    ```python
    def call_api(endpoint: str, params: dict = None, payload: dict = None, method: str = 'GET') -> dict:
        url_params = '?' + urlencode(params) if params else ''
        headers = build_headers(params or payload)
        url = BASE_URL + endpoint + url_params

        request_kwargs = {
            'method': method,
            'url': url,
            'headers': headers,
        }
        if method.upper() == 'POST' and payload is not None:
            request_kwargs['json'] = payload

        response = requests.request(**request_kwargs)
        return response.json()
    ```


    call_api() function is a robust, flexible, and high-level interface for interacting with the API. It provides a systematic and straightforward way to request data from an endpoint, with full support for different HTTP methods and optional parameters and payloads. This function aims to streamline your API interactions and make them more efficient.

    Key features:
    - **endpoint**: String, required. Specifies the endpoint you want to interact with.
    - **params**: Dictionary, optional. Contains the URL parameters you want to add to the endpoint.
    - **payload**: Dictionary, optional. Contains the payload you want to send with your request, primarily for POST and PUT requests.
    - **method**: String, optional (default 'GET'). Specifies the HTTP method you want to use for the request (GET, POST, PUT, DELETE, etc.).

    This function constructs the API request using the provided arguments, adds necessary headers using the build_headers() function, sends the request, and finally returns the response in JSON format.

    For POST requests, it adds the payload as JSON.

    ### **Example Usage**

    Here's an example usage:

        response = call_api(
            endpoint='markets/',
            params={
                'Key': PUBLIC_KEY,
                'Timestamp': int(datetime.datetime.utcnow().timestamp()),
                'category': 5,
            },
            method='GET'
        )
    or simply:

        import requests

        base_url = "https://api.futuur.com/api/v1/"
        endpoint = "markets/"
        response = requests.get(base_url + endpoint).json()


    This will retrieve data from the '/markets/' endpoint with the category parameter set to 5.

    Remember to always handle the responses properly, including the potential errors from the API.

    ### **Bet Example**

    ```python
    payload = {
        'Key': PUBLIC_KEY,
        'Timestamp': int(datetime.datetime.utcnow().timestamp()),
        'outcome': outcome_id,
        'amount': amount,
        'currency': 'OOM'
    }
    simulate = call_api('bets/simulate_purchase/', params=payload, method='GET')
    response = call_api('bets/', payload=simulate, method='POST')
    ```
    P.S The bets/simulate_purchase/ return the exactly payload that you need to send to the bets/ endpoint.
paths:
  /api/v1/bets/:
    get:
      operationId: Betting List.
      description: "Return a list of all your bets. Work with parameters to better\
        \ filter your query.\n                       The bets status would be: \n\n\
        \                       'status' -> status_display\n                     \
        \  'l' -> lost\n                       'p' -> purchased\n                \
        \       's' -> sold\n                       'w' -> won\n                 \
        \      'x' -> cancelled\n                       'd' -> disabled"
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
        description: Filter by active wagers (wagers with status purchased)
      - in: query
        name: currency_mode
        schema:
          enum:
          - play_money
          - real_money
          - ''
          type: string
        description: |-
          * `play_money` - Play money
          * `real_money` - Real money
      - in: query
        name: following
        schema:
          type: boolean
        description: Filter by bets made by users I follow.
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: past_bets
        schema:
          type: boolean
        description: Filter by not active wagers (wagers with status sold, won, lost,
          disabled)
      - in: query
        name: question
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
      tags:
      - bets
      security:
      - HMAC: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBetListList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ClientError:
                  value:
                    type: client_error
                    errors:
                    - code: bad_request
                      detail: Bad Request - Invalid or missing parameters
                      attr: string
                  summary: Client Error
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ValidationError:
                  value:
                    type: client_error
                    errors:
                    - code: not_authenticated
                      detail: Unauthorized - Authentication required
                      attr: string
                  summary: Validation Error
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ServerError:
                  value:
                    type: server_error
                    errors:
                    - code: internal_server_error
                      detail: A server error occurred. Please contact support if the
                        issue persists.
                      attr: string
                  summary: Server Error
          description: ''
    post:
      operationId: Purchase
      description: |-
        Bet on a market by purchasing an outcome position.

        **Position Long**: Bet **in favor** of a specific outcome. You win if the selected outcome occurs.

        **Position Short**: Bet **against** a specific outcome. You win if any other outcome occurs.
        P.S. For markets with 3 or more outcomes
      tags:
      - bets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BetPurchase'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BetPurchase'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BetPurchase'
        required: true
      security:
      - HMAC: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ClientError:
                  value:
                    type: client_error
                    errors:
                    - code: InvalidOperation | InvalidAmount | InvalidPurchaseShares
                        | NotEnoughBalance | EmailNotConfirmed | QuestionClosed |
                        MaxSharesPerWager | ActionDuplicated | NotEnoughBalanceWithOpenedWithdrawals
                        | CurrencyNotAvailable | BetsBlocked | InvalidHMACKey | RealMoneyBetNotAllowed
                      detail: string
                      attr: string
                  summary: Client Error
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ValidationError:
                  value:
                    type: client_error
                    errors:
                    - code: not_authenticated
                      detail: Authentication credentials were not provided.
                      attr: string
                  summary: Validation Error
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ServerError:
                  value:
                    type: server_error
                    errors:
                    - code: internal_server_error
                      detail: A server error occurred. Please contact support if the
                        issue persists.
                      attr: string
                  summary: Server Error
          description: ''
  /api/v1/bets/{id}/:
    get:
      operationId: Bet Detail
      description: Return information on your bet, on a given market, for an outcome
        and currency.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this wager.
        required: true
      tags:
      - bets
      security:
      - HMAC: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ClientError:
                  value:
                    type: client_error
                    errors:
                    - code: bad_request
                      detail: Bad Request - Invalid or missing parameters
                      attr: string
                  summary: Client Error
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ValidationError:
                  value:
                    type: client_error
                    errors:
                    - code: not_authenticated
                      detail: Unauthorized - Authentication required
                      attr: string
                  summary: Validation Error
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ServerError:
                  value:
                    type: server_error
                    errors:
                    - code: internal_server_error
                      detail: A server error occurred. Please contact support if the
                        issue persists.
                      attr: string
                  summary: Server Error
          description: ''
    patch:
      operationId: Sell
      description: |-
        Sell your entire position (previously purchased) on an outcome for a given currency. To sell the entire position, send a PATCH request with the bet ID. For a partial sale, include the number of shares in the request body using the 'shares' field.
        P.S. Use get_partial_amount_on_sell to determine how many shares you can sell for a partial sale. This means only a portion of your original purchase will be sold, and you will continue to hold the remaining shares.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this wager.
        required: true
      tags:
      - bets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBetPartialSell'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBetPartialSell'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBetPartialSell'
      security:
      - HMAC: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ClientError:
                  value:
                    type: client_error
                    errors:
                    - code: QuestionClosed | NotAllowedOperation | InvalidOperation
                        | ActionDuplicated | InvalidHMACKey | RealMoneyBetNotAllowed
                        | InvalidPartialSellShares | InvalidAmount
                      detail: Bad Request - Invalid or missing parameters
                      attr: string
                  summary: Client Error
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ValidationError:
                  value:
                    type: client_error
                    errors:
                    - code: not_authenticated
                      detail: Unauthorized - Authentication required
                      attr: string
                  summary: Validation Error
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ServerError:
                  value:
                    type: server_error
                    errors:
                    - code: internal_server_error
                      detail: A server error occurred. Please contact support if the
                        issue persists.
                      attr: string
                  summary: Server Error
          description: ''
  /api/v1/bets/{id}/get_partial_amount_on_sell/:
    get:
      operationId: Get partial amount on sell
      description: |-
        This endpoint calculates the amount that a user will receive if they sell a portion of their shares.
        The request parameter is mandatory and include:
        - Shares: the number of shares that the user wants to sell
        The amount will be calculated based on the number of shares that the user wants to sell.
        The endpoint returns a response that includes the wager ID and the result of the calculation,
        including the calculated amount to be received.
        If either shares is missing, a response with the error message "Data required missing."
        and a 400 Bad Request status code will be returned.
      parameters:
      - in: query
        name: amount
        schema:
          type: number
          format: double
          maximum: 10000000000
          minimum: 0
          exclusiveMaximum: true
        description: Required only for partial sales. Specify the amount you want
          to receive from selling the specified shares. Both 'shares' and 'amount'
          must be provided for a partial sale. If neither is provided, the entire
          position will be sold.Check get_partial_amount_on_sell endpoint for more
          details.
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this wager.
        required: true
      - in: query
        name: shares
        schema:
          type: number
          format: double
          maximum: 10000000000
          minimum: 0.0000000000010
          exclusiveMaximum: true
        description: Required only for partial sales. Specify the number of shares
          you want to sell. If no value is provided, the entire position will be sold.
          You will retain the remaining shares after the partial sale.
      tags:
      - bets
      security:
      - HMAC: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetPartialSellResponse'
          description: ''
  /api/v1/bets/latest_purchase_actions/:
    get:
      operationId: bets_latest_purchase_actions_retrieve
      description: |-
        Returns the most recent purchased actions on the site, without filtering by current user.

        This endpoint returns a list of the most recent actions with summarized information
        about the user who placed the bet, the market, and action details.

        Returns:
        List of wager actions with:
        - user: username and profile picture
        - question: title, id, slug, and indicator if it's a yes/no market
        - wager: position, amount
      tags:
      - bets
      security:
      - HMAC: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetList'
          description: ''
  /api/v1/bets/rates/:
    get:
      operationId: Current rates
      description: |-
        Returns a dict with latest rates. Each dict gives rates for currency field.

        eg.:



            [

                {'rates': {'BTC': float, 'LTC': float, ...}, 'currency': str, 'last_update': datetime, },

                {'rates': {'BTC': float, 'LTC': float, ...}, 'currency': str, 'last_update': datetime, },

            ...

            ]




        A unit of the 'currency' is equivalent to the amount specified in the corresponding rate for
        the respective cryptocurrency (BTC, LTC, etc.) as per the data provided.
        The information is updated as of the 'last_update' datetime.
      tags:
      - bets
      security:
      - HMAC: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rates'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ClientError:
                  value:
                    type: client_error
                    errors:
                    - code: bad_request
                      detail: Bad Request - Invalid or missing parameters
                      attr: string
                  summary: Client Error
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ValidationError:
                  value:
                    type: client_error
                    errors:
                    - code: not_authenticated
                      detail: Unauthorized - Authentication required
                      attr: string
                  summary: Validation Error
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ServerError:
                  value:
                    type: server_error
                    errors:
                    - code: internal_server_error
                      detail: A server error occurred. Please contact support if the
                        issue persists.
                      attr: string
                  summary: Server Error
          description: ''
  /api/v1/bets/simulate_purchase/:
    get:
      operationId: Simulate purchase
      description: |-
        This endpoint calculates the amount that a user will pay and the number of shares they will receive if their selected outcome is correct. The request parameters are mandatory and include:

        - Outcome: ID of the outcome that the user wants to purchase a position in
        - Currency: currency in which the purchase will be made
        - Shares or Amount: either the number of shares or the amount that the user wants to purchase.

        The cost function of the purchase can be calculated either exactly or numerically.
        The priority is to calculate the amount from the number of shares (exactly).
        If the number of shares is not provided, the amount will be calculated from the number of shares
        (numerically, which means through minimization).
        If both the amount and shares are provided, shares will be treated as mandatory.
        The endpoint returns a response that includes the outcome ID and currency of the purchase,
        as well as the result of the simulated purchase,
        including the calculated amount to be paid and the number of shares to be received.
        If either outcome or shares/amount is missing, a response with the error message "Data required missing."
        and a 400 Bad Request status code will be returned.
      parameters:
      - in: query
        name: amount
        schema:
          type: number
          format: double
          maximum: 10000000000
          minimum: -10000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
      - in: query
        name: currency
        schema:
          enum:
          - OOM
          - USD
          - EUR
          - BRL
          - MXN
          - BTC
          - LTC
          - LTCT
          - BCH
          - BNB
          - DOGE
          - ETH
          - TRX
          - USDC
          - SOL
          - XMR
          - BUSD
          - USDT
          type: string
          minLength: 1
        description: |-
          * `OOM` - OOM
          * `USD` - USD
          * `EUR` - EUR
          * `BRL` - BRL
          * `MXN` - MXN
          * `BTC` - BTC
          * `LTC` - LTC
          * `LTCT` - LTCT
          * `BCH` - BCH
          * `BNB` - BNB
          * `DOGE` - DOGE
          * `ETH` - ETH
          * `TRX` - TRX
          * `USDC` - USDC
          * `SOL` - SOL
          * `XMR` - XMR
          * `BUSD` - BUSD
          * `USDT` - USDT
        required: true
      - in: query
        name: outcome
        schema:
          type: integer
        required: true
      - in: query
        name: position
        schema:
          enum:
          - l
          - s
          type: string
          default: l
          minLength: 1
        description: |-
          * `l` - long
          * `s` - short
      - in: query
        name: shares
        schema:
          type: number
          format: double
          maximum: 10000000000
          minimum: -10000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
      tags:
      - bets
      security:
      - HMAC: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetPrice'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ClientError:
                  value:
                    type: client_error
                    errors:
                    - code: bad_request
                      detail: Bad Request - Invalid or missing parameters
                      attr: string
                  summary: Client Error
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ValidationError:
                  value:
                    type: client_error
                    errors:
                    - code: not_authenticated
                      detail: Unauthorized - Authentication required
                      attr: string
                  summary: Validation Error
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ServerError:
                  value:
                    type: server_error
                    errors:
                    - code: internal_server_error
                      detail: A server error occurred. Please contact support if the
                        issue persists.
                      attr: string
                  summary: Server Error
          description: ''
  /api/v1/categories/:
    get:
      operationId: Category List
      description: Return list of categories
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - categories
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryListList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ClientError:
                  value:
                    type: client_error
                    errors:
                    - code: bad_request
                      detail: Bad Request - Invalid or missing parameters
                      attr: string
                  summary: Client Error
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ValidationError:
                  value:
                    type: client_error
                    errors:
                    - code: not_authenticated
                      detail: Unauthorized - Authentication required
                      attr: string
                  summary: Validation Error
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ServerError:
                  value:
                    type: server_error
                    errors:
                    - code: internal_server_error
                      detail: A server error occurred. Please contact support if the
                        issue persists.
                      attr: string
                  summary: Server Error
          description: ''
  /api/v1/categories/{id}/:
    get:
      operationId: Category Detail
      description: Return category detail
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - categories
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ClientError:
                  value:
                    type: client_error
                    errors:
                    - code: bad_request
                      detail: Bad Request - Invalid or missing parameters
                      attr: string
                  summary: Client Error
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ValidationError:
                  value:
                    type: client_error
                    errors:
                    - code: not_authenticated
                      detail: Unauthorized - Authentication required
                      attr: string
                  summary: Validation Error
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ServerError:
                  value:
                    type: server_error
                    errors:
                    - code: internal_server_error
                      detail: A server error occurred. Please contact support if the
                        issue persists.
                      attr: string
                  summary: Server Error
          description: ''
  /api/v1/categories/featured/:
    get:
      operationId: categories_featured_retrieve
      description: Return top 10 featured categories highest volume first.
      tags:
      - categories
      security:
      - HMAC: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDetail'
          description: ''
  /api/v1/categories/root/:
    get:
      operationId: Root Categories
      description: Return root categories
      tags:
      - categories
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryBase'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ClientError:
                  value:
                    type: client_error
                    errors:
                    - code: bad_request
                      detail: Bad Request - Invalid or missing parameters
                      attr: string
                  summary: Client Error
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ValidationError:
                  value:
                    type: client_error
                    errors:
                    - code: not_authenticated
                      detail: Unauthorized - Authentication required
                      attr: string
                  summary: Validation Error
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ServerError:
                  value:
                    type: server_error
                    errors:
                    - code: internal_server_error
                      detail: A server error occurred. Please contact support if the
                        issue persists.
                      attr: string
                  summary: Server Error
          description: ''
  /api/v1/categories/root_and_main_children/:
    get:
      operationId: Root Categories and Main Children
      description: Return root categories and main children
      parameters:
      - in: query
        name: currency_mode
        schema:
          enum:
          - play_money
          - real_money
          type: string
          minLength: 1
        description: |-
          * `play_money` - Play money
          * `real_money` - Real money
      - in: query
        name: search
        schema:
          type: string
          minLength: 1
      tags:
      - categories
      security:
      - HMAC: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryMainChildren'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ClientError:
                  value:
                    type: client_error
                    errors:
                    - code: bad_request
                      detail: Bad Request - Invalid or missing parameters
                      attr: string
                  summary: Client Error
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ValidationError:
                  value:
                    type: client_error
                    errors:
                    - code: not_authenticated
                      detail: Unauthorized - Authentication required
                      attr: string
                  summary: Validation Error
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ServerError:
                  value:
                    type: server_error
                    errors:
                    - code: internal_server_error
                      detail: A server error occurred. Please contact support if the
                        issue persists.
                      attr: string
                  summary: Server Error
          description: ''
  /api/v1/limit_order/:
    get:
      operationId: Limit Order List. 🚧 The Limit Order endpoint will be available
        soon. Stay tuned!
      description: |-
        Retrieve a paginated list of all **limit orders** placed by Outcome or Question for Real Money or Play Money.

        **Filtering Options:**
        - `currency` (**required**) → Filter by currency.
        - `question` (**required**) → Filter by market (question ID).
        - `outcome` (**optional**) → Filter by specific outcome within the market.

        This endpoint only returns **orders created by the authenticated user** and does not include public order book data.
      parameters:
      - in: query
        name: currency
        schema:
          type: string
          default: OOM
          maxLength: 4
          minLength: 1
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: outcome
        schema:
          type: integer
      - in: query
        name: question
        schema:
          type: integer
      tags:
      - limit_order
      security:
      - HMAC: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLimitOrderList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ClientError:
                  value:
                    type: client_error
                    errors:
                    - code: bad_request
                      detail: Bad Request - Invalid or missing parameters
                      attr: string
                  summary: Client Error
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ValidationError:
                  value:
                    type: client_error
                    errors:
                    - code: not_authenticated
                      detail: Unauthorized - Authentication required
                      attr: string
                  summary: Validation Error
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ServerError:
                  value:
                    type: server_error
                    errors:
                    - code: internal_server_error
                      detail: A server error occurred. Please contact support if the
                        issue persists.
                      attr: string
                  summary: Server Error
          description: ''
    post:
      operationId: Create Limit Order
      description: |-
        Place a limit order in the order book.

        **What is a Limit Order?**
        A limit order allows you to specify the exact price you are willing to pay (if buying) or receive (if selling) for a specific outcome in a given market.

        **Market Behavior by Outcome Count:**
        - **Markets with only 2 outcomes:** Only `long` positions are available for both outcomes.
        - **Markets with 3 or more outcomes:** The order book supports `bid` and `ask` orders for both `long` and `short` positions on each outcome.

        **Order Types:**
        - `bid` → A buy order where the user wants to purchase shares at a specific price.
        - `ask` → A sell order where the user wants to sell shares at a specific price.

        **Position Types:**
        - `long (l)` → Bet in favor of an outcome occurring.
        - `short (s)` → Bet against an outcome occurring (only available in markets with 3+ outcomes).

        **Example Behavior:**
        - In a **Yes/No** market, you can only place `long` positions on either outcome.
        - In a **multi-outcome** market, you can place `long` and `short` positions on the same outcome with different `bid` and `ask` orders.

        This flexibility allows for hedging strategies and more complex market participation.
      tags:
      - limit_order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LimitOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LimitOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LimitOrder'
        required: true
      security:
      - HMAC: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitOrder'
          description: ''
  /api/v1/limit_order/{id}/cancel/:
    patch:
      operationId: Cancel Limit Order
      description: |-
        Cancel an existing limit order using its unique `id`.

        This action will remove the order from the order book, making it unavailable for matching.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this limit order.
        required: true
      tags:
      - limit_order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLimitOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLimitOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLimitOrder'
      security:
      - HMAC: []
      responses:
        '204':
          description: No response body
  /api/v1/limit_order/my_orders/:
    get:
      operationId: My Orders
      description: Retrieve a paginated list of all limit orders placed by the authenticated
        user. The request must include the 'currency' parameter and either 'question'
        or 'outcome' for filtering. Orders will be returned based on the specified
        criteria.
      parameters:
      - in: query
        name: currency
        schema:
          type: string
          default: OOM
          maxLength: 4
          minLength: 1
      - in: query
        name: outcome
        schema:
          type: integer
      - in: query
        name: question
        schema:
          type: integer
      tags:
      - limit_order
      security:
      - HMAC: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitOrder'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ClientError:
                  value:
                    type: client_error
                    errors:
                    - code: bad_request
                      detail: Bad Request - Invalid or missing parameters
                      attr: string
                  summary: Client Error
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ValidationError:
                  value:
                    type: client_error
                    errors:
                    - code: not_authenticated
                      detail: Unauthorized - Authentication required
                      attr: string
                  summary: Validation Error
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ServerError:
                  value:
                    type: server_error
                    errors:
                    - code: internal_server_error
                      detail: A server error occurred. Please contact support if the
                        issue persists.
                      attr: string
                  summary: Server Error
          description: ''
  /api/v1/limit_order/order_book/:
    get:
      operationId: Aggregated Order Book
      description: |-
        Retrieve the aggregated order book for a given `question`, grouped by price levels.

        This endpoint returns the total number of shares available at each price point for both `bid` and `ask` orders.
      parameters:
      - in: query
        name: currency
        schema:
          type: string
          default: OOM
          maxLength: 4
          minLength: 1
      - in: query
        name: outcome
        schema:
          type: integer
      - in: query
        name: question
        schema:
          type: integer
      tags:
      - limit_order
      security:
      - HMAC: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AggregatedLimitOrder'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ClientError:
                  value:
                    type: client_error
                    errors:
                    - code: bad_request
                      detail: Bad Request - Invalid or missing parameters
                      attr: string
                  summary: Client Error
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ValidationError:
                  value:
                    type: client_error
                    errors:
                    - code: not_authenticated
                      detail: Unauthorized - Authentication required
                      attr: string
                  summary: Validation Error
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ServerError:
                  value:
                    type: server_error
                    errors:
                    - code: internal_server_error
                      detail: A server error occurred. Please contact support if the
                        issue persists.
                      attr: string
                  summary: Server Error
          description: ''
  /api/v1/markets/:
    get:
      operationId: Market List
      description: "\n            Return list of markets\"\n            The market\
        \ status would be: \n\n            'status' -> status_display\n          \
        \  'o' -> open\n            's' -> stopped\n            'c' -> closed(resolved)\n\
        \            'x' -> cancelled\n            'r' -> reversed(outcome\n     \
        \       result\n            changed)"
      parameters:
      - in: query
        name: categories
        schema:
          type: array
          items:
            type: integer
      - in: query
        name: currency_mode
        schema:
          enum:
          - play_money
          - real_money
          type: string
          default: play_money
          minLength: 1
        description: |-
          * `play_money` - Play money
          * `real_money` - Real money
      - in: query
        name: hide_my_bets
        schema:
          type: boolean
          default: false
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: live
        schema:
          type: boolean
          default: false
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: only_markets_i_follow
        schema:
          type: boolean
          default: false
      - in: query
        name: ordering
        schema:
          enum:
          - ''
          - relevance
          - -created_on
          - bet_end_date
          - -wagers_count
          - -volume
          type: string
          default: ''
          minLength: 1
        description: |-
          * `` - null
          * `relevance` - relevance
          * `-created_on` - created_on
          * `bet_end_date` - bet_end_date
          * `-wagers_count` - wagers_count
          * `-volume` - Volume
      - in: query
        name: resolved_only
        schema:
          type: boolean
          default: false
      - in: query
        name: search
        schema:
          type: string
          maxLength: 100
          minLength: 1
      - in: query
        name: tag
        schema:
          type: string
          maxLength: 100
          minLength: 1
      tags:
      - markets
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMarketListList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ClientError:
                  value:
                    type: client_error
                    errors:
                    - code: bad_request
                      detail: Bad Request - Invalid or missing parameters
                      attr: string
                  summary: Client Error
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ValidationError:
                  value:
                    type: client_error
                    errors:
                    - code: not_authenticated
                      detail: Unauthorized - Authentication required
                      attr: string
                  summary: Validation Error
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ServerError:
                  value:
                    type: server_error
                    errors:
                    - code: internal_server_error
                      detail: A server error occurred. Please contact support if the
                        issue persists.
                      attr: string
                  summary: Server Error
          description: ''
  /api/v1/markets/{id}/:
    get:
      operationId: Market Detail
      description: Return market information from its ID.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this market.
        required: true
      tags:
      - markets
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ClientError:
                  value:
                    type: client_error
                    errors:
                    - code: bad_request
                      detail: Bad Request - Invalid or missing parameters
                      attr: string
                  summary: Client Error
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ValidationError:
                  value:
                    type: client_error
                    errors:
                    - code: not_authenticated
                      detail: Unauthorized - Authentication required
                      attr: string
                  summary: Validation Error
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ServerError:
                  value:
                    type: server_error
                    errors:
                    - code: internal_server_error
                      detail: A server error occurred. Please contact support if the
                        issue persists.
                      attr: string
                  summary: Server Error
          description: ''
  /api/v1/markets/{id}/related_markets/:
    get:
      operationId: Related Markets
      description: Return related markets of a market
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this market.
        required: true
      tags:
      - markets
      security:
      - HMAC: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelatedQuestion'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ClientError:
                  value:
                    type: client_error
                    errors:
                    - code: bad_request
                      detail: Bad Request - Invalid or missing parameters
                      attr: string
                  summary: Client Error
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ValidationError:
                  value:
                    type: client_error
                    errors:
                    - code: not_authenticated
                      detail: Unauthorized - Authentication required
                      attr: string
                  summary: Validation Error
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ServerError:
                  value:
                    type: server_error
                    errors:
                    - code: internal_server_error
                      detail: A server error occurred. Please contact support if the
                        issue persists.
                      attr: string
                  summary: Server Error
          description: ''
  /api/v1/markets/suggest_market/:
    post:
      operationId: Suggest Market
      description: Suggest a market
      parameters:
      - in: query
        name: category
        schema:
          type: string
          maxLength: 75
          minLength: 1
      - in: query
        name: description
        schema:
          type: string
          maxLength: 800
          minLength: 1
        required: true
      - in: query
        name: end_bet_date
        schema:
          type: string
          format: date-time
      - in: query
        name: outcomes
        schema:
          type: array
          items:
            $ref: '#/components/schemas/SuggestOutcome'
          minItems: 2
      - in: query
        name: title
        schema:
          type: string
          maxLength: 150
          minLength: 1
        required: true
      tags:
      - markets
      security:
      - HMAC: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggetMarket'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ClientError:
                  value:
                    type: client_error
                    errors:
                    - code: bad_request
                      detail: Bad Request - Invalid or missing parameters
                      attr: string
                  summary: Client Error
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ValidationError:
                  value:
                    type: client_error
                    errors:
                    - code: not_authenticated
                      detail: Unauthorized - Authentication required
                      attr: string
                  summary: Validation Error
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ServerError:
                  value:
                    type: server_error
                    errors:
                    - code: internal_server_error
                      detail: A server error occurred. Please contact support if the
                        issue persists.
                      attr: string
                  summary: Server Error
          description: ''
  /api/v1/me/:
    get:
      operationId: me
      description: The endpoint returns information about a user.
      tags:
      - me
      security:
      - HMAC: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MePrivatePublic'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ClientError:
                  value:
                    type: client_error
                    errors:
                    - code: bad_request
                      detail: Bad Request - Invalid or missing parameters
                      attr: string
                  summary: Client Error
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ValidationError:
                  value:
                    type: client_error
                    errors:
                    - code: not_authenticated
                      detail: Unauthorized - Authentication required
                      attr: string
                  summary: Validation Error
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ServerError:
                  value:
                    type: server_error
                    errors:
                    - code: internal_server_error
                      detail: A server error occurred. Please contact support if the
                        issue persists.
                      attr: string
                  summary: Server Error
          description: ''
components:
  schemas:
    ActionEnum:
      enum:
      - s
      - ps
      - p
      - w
      - l
      - x
      - r
      - d
      type: string
      description: |-
        * `s` - sale
        * `ps` - partial sale
        * `p` - purchase
        * `w` - win
        * `l` - lose
        * `x` - cancel
        * `r` - reverse
        * `d` - disable
    ActivePurchases:
      type: object
      properties:
        price:
          type: number
          format: double
        action:
          allOf:
          - $ref: '#/components/schemas/ActionEnum'
          default: purchase
        amount:
          type: number
          format: double
          maximum: 10000000000
          minimum: -10000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        shares:
          type: number
          format: double
          maximum: 10000000000
          minimum: -10000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        created:
          type: string
          format: date-time
        currency:
          $ref: '#/components/schemas/CurrencyEnum'
        position:
          allOf:
          - $ref: '#/components/schemas/PositionEnum'
          default: l
      required:
      - amount
      - created
      - currency
      - price
      - shares
    AggregatedLimitOrder:
      type: object
      properties:
        price:
          type: number
          format: double
          maximum: 1000
          minimum: -1000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        side:
          allOf:
          - $ref: '#/components/schemas/SideEnum'
          readOnly: true
        position:
          allOf:
          - $ref: '#/components/schemas/PositionEnum'
          readOnly: true
        outcome_id:
          type: integer
          readOnly: true
        total_shares:
          type: number
          format: double
          maximum: 1000000000000
          minimum: -1000000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        total_amount:
          type: number
          format: double
          maximum: 1000000000000
          minimum: -1000000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        cumulative_amount:
          type: number
          format: double
          maximum: 1000000000000
          minimum: -1000000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
      required:
      - cumulative_amount
      - outcome_id
      - position
      - price
      - side
      - total_amount
      - total_shares
    BetDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        status:
          $ref: '#/components/schemas/Status6baEnum'
        status_display:
          type: string
          readOnly: true
        user:
          $ref: '#/components/schemas/UserBasic'
        question:
          $ref: '#/components/schemas/MarketDetail'
        position:
          allOf:
          - $ref: '#/components/schemas/PositionEnum'
          description: |-
            Select 'Long' if you expect the outcome to be correct, or 'Short' if you expect the outcome to be incorrect.

            * `l` - long
            * `s` - short
        active_purchases:
          type: array
          items:
            $ref: '#/components/schemas/ActivePurchases'
        last_action:
          $ref: '#/components/schemas/ActivePurchases'
        outcome:
          $ref: '#/components/schemas/Outcome'
      required:
      - active_purchases
      - id
      - last_action
      - outcome
      - question
      - status
      - status_display
      - user
    BetList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        status:
          $ref: '#/components/schemas/Status6baEnum'
        status_display:
          type: string
          readOnly: true
        user:
          $ref: '#/components/schemas/UserBasic'
        question:
          $ref: '#/components/schemas/MarketDetail'
        position:
          allOf:
          - $ref: '#/components/schemas/PositionEnum'
          description: |-
            Select 'Long' if you expect the outcome to be correct, or 'Short' if you expect the outcome to be incorrect.

            * `l` - long
            * `s` - short
        active_purchases:
          type: array
          items:
            $ref: '#/components/schemas/ActivePurchases'
        last_action:
          $ref: '#/components/schemas/ActivePurchases'
        outcome:
          $ref: '#/components/schemas/Outcome'
      required:
      - active_purchases
      - id
      - last_action
      - outcome
      - question
      - status
      - status_display
      - user
    BetPartialSellResponse:
      type: object
      properties:
        shares:
          type: number
          format: double
          maximum: 10000000000
          minimum: -10000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        amount:
          type: number
          format: double
          maximum: 10000000000
          minimum: -10000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        price:
          type: number
          format: double
      required:
      - amount
      - price
      - shares
    BetPrice:
      type: object
      properties:
        outcome:
          type: integer
        amount:
          type: number
          format: double
          maximum: 10000000000
          minimum: -10000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        shares:
          type: number
          format: double
          maximum: 10000000000
          minimum: -10000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        currency:
          $ref: '#/components/schemas/CurrencyEnum'
        position:
          allOf:
          - $ref: '#/components/schemas/PositionEnum'
          default: l
      required:
      - currency
      - outcome
    BetPurchase:
      type: object
      properties:
        outcome:
          type: integer
        amount:
          type: number
          format: double
          maximum: 10000000000
          minimum: -10000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        shares:
          type: number
          format: double
          maximum: 10000000000
          minimum: -10000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        currency:
          type: string
          maxLength: 11
        position:
          allOf:
          - $ref: '#/components/schemas/PositionEnum'
          default: l
          description: |-
            Select 'long' (l) to bet in favor of the outcome, or 'short' (s) to bet against it.

            * `l` - long
            * `s` - short
      required:
      - outcome
      - shares
    BlankEnum:
      enum:
      - ''
    CategoryBase:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 75
        slug:
          type: string
          description: The slug is used to populate the URLs.
          maxLength: 75
          pattern: ^[-a-zA-Z0-9_]+$
        parent:
          type: integer
          nullable: true
        in_leaderboard:
          type: boolean
        icon:
          type: string
          format: uri
          nullable: true
      required:
      - id
      - slug
      - title
    CategoryDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 75
        slug:
          type: string
          description: The slug is used to populate the URLs.
          maxLength: 75
          pattern: ^[-a-zA-Z0-9_]+$
        parent:
          type: string
          readOnly: true
        in_leaderboard:
          type: boolean
        icon:
          type: string
          format: uri
          nullable: true
        tree:
          type: string
          readOnly: true
        volume_play_money:
          type: string
          readOnly: true
        volume_real_money:
          type: string
          readOnly: true
        children:
          type: string
          readOnly: true
        seo:
          type: string
          readOnly: true
      required:
      - children
      - id
      - parent
      - seo
      - slug
      - title
      - tree
      - volume_play_money
      - volume_real_money
    CategoryList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 75
        slug:
          type: string
          description: The slug is used to populate the URLs.
          maxLength: 75
          pattern: ^[-a-zA-Z0-9_]+$
        parent:
          type: integer
          nullable: true
        in_leaderboard:
          type: boolean
        icon:
          type: string
          format: uri
          nullable: true
        tree:
          type: string
          readOnly: true
        volume_play_money:
          type: string
          readOnly: true
        volume_real_money:
          type: string
          readOnly: true
      required:
      - id
      - slug
      - title
      - tree
      - volume_play_money
      - volume_real_money
    CategoryMainChildren:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 75
        slug:
          type: string
          description: The slug is used to populate the URLs.
          maxLength: 75
          pattern: ^[-a-zA-Z0-9_]+$
        parent:
          type: integer
          nullable: true
        in_leaderboard:
          type: boolean
        icon:
          type: string
          format: uri
          nullable: true
        children:
          type: array
          items:
            $ref: '#/components/schemas/CategoryBase'
      required:
      - children
      - id
      - slug
      - title
    CurrencyEnum:
      enum:
      - OOM
      - USD
      - EUR
      - BRL
      - MXN
      - BTC
      - LTC
      - LTCT
      - BCH
      - BNB
      - DOGE
      - ETH
      - TRX
      - USDC
      - SOL
      - XMR
      - BUSD
      - USDT
      type: string
      description: |-
        * `OOM` - OOM
        * `USD` - USD
        * `EUR` - EUR
        * `BRL` - BRL
        * `MXN` - MXN
        * `BTC` - BTC
        * `LTC` - LTC
        * `LTCT` - LTCT
        * `BCH` - BCH
        * `BNB` - BNB
        * `DOGE` - DOGE
        * `ETH` - ETH
        * `TRX` - TRX
        * `USDC` - USDC
        * `SOL` - SOL
        * `XMR` - XMR
        * `BUSD` - BUSD
        * `USDT` - USDT
    ErrorDetail:
      type: object
      properties:
        code:
          type: string
        detail:
          type: string
        attr:
          type: string
          nullable: true
      required:
      - attr
      - code
      - detail
    ErrorResponse:
      type: object
      properties:
        type:
          type: string
        errors:
          $ref: '#/components/schemas/ErrorDetail'
      required:
      - errors
      - type
    LimitOrder:
      type: object
      properties:
        outcome:
          type: integer
        price:
          type: number
          format: double
          maximum: 0.99
          minimum: 0.01
          description: Limit price per share the user is willing to pay or receive.
        shares:
          type: number
          format: double
          maximum: 100000000
          minimum: -100000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          description: Number of shares unfilled in the order.
        currency:
          type: string
          maxLength: 11
        side:
          allOf:
          - $ref: '#/components/schemas/SideEnum'
          description: |-
            Order Type: 'bid' buy) to purchase or 'ask' (sell) to sell.

            * `bid` - Bid
            * `ask` - Ask
        position:
          allOf:
          - $ref: '#/components/schemas/PositionEnum'
          description: |-
            Position of the order: 'long' if you expect the outcome to occur, 'short' if you expect it not to occur.

            * `l` - long
            * `s` - short
      required:
      - outcome
      - price
      - side
    MarketDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 150
        slug:
          type: string
          description: The slug is used to populate the URLs.
          maxLength: 150
          pattern: ^[-a-zA-Z0-9_]+$
        status:
          $ref: '#/components/schemas/StatusBf3Enum'
        status_display:
          type: string
          readOnly: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        bet_end_date:
          type: string
          format: date-time
          nullable: true
          description: Date/time to end betting.
        event_start_date:
          type: string
          format: date-time
          nullable: true
        event_end_date:
          type: string
          format: date-time
          nullable: true
        resolution:
          allOf:
          - $ref: '#/components/schemas/Outcome'
          description: Won outcome of the market
        resolve_date:
          type: string
          format: date-time
          nullable: true
          description: Date/time when resolution was set.
        real_currency_available:
          type: boolean
        is_binary:
          type: boolean
          nullable: true
          description: If the question has only two outcomes.
        outcomes_type:
          allOf:
          - $ref: '#/components/schemas/OutcomesTypeEnum'
          description: |-
            This field defines how to render the market card.

            * `yesno` - Yes/No
            * `custom` - Custom names
        thumbnail:
          type: string
          readOnly: true
        wagers_count:
          type: integer
          readOnly: true
          description: Wagers count in play money
        wagers_count_canonical:
          type: integer
          readOnly: true
          description: Wagers count in real money
        volume_play_money:
          type: string
          readOnly: true
        volume_real_money:
          type: string
          readOnly: true
        is_following:
          type: string
          readOnly: true
        category:
          $ref: '#/components/schemas/CategoryBase'
        outcomes:
          type: array
          items:
            $ref: '#/components/schemas/Outcome'
        last_wager_real_money:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          description: 'Wager in real money that short selling will be applied. '
          readOnly: true
        last_wager_play_money:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          description: 'Wager in play money that short selling will be applied. '
          readOnly: true
        relevance:
          type: string
          readOnly: true
        hot:
          type: boolean
          description: Questions marked as hot earns relevance in feed.
        description:
          type: string
          nullable: true
      required:
      - category
      - id
      - is_following
      - last_wager_play_money
      - last_wager_real_money
      - outcomes
      - relevance
      - resolution
      - slug
      - status_display
      - tags
      - thumbnail
      - title
      - volume_play_money
      - volume_real_money
      - wagers_count
      - wagers_count_canonical
    MarketList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 150
        slug:
          type: string
          description: The slug is used to populate the URLs.
          maxLength: 150
          pattern: ^[-a-zA-Z0-9_]+$
        status:
          $ref: '#/components/schemas/StatusBf3Enum'
        status_display:
          type: string
          readOnly: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        bet_end_date:
          type: string
          format: date-time
          nullable: true
          description: Date/time to end betting.
        event_start_date:
          type: string
          format: date-time
          nullable: true
        event_end_date:
          type: string
          format: date-time
          nullable: true
        resolution:
          allOf:
          - $ref: '#/components/schemas/Outcome'
          description: Won outcome of the market
        resolve_date:
          type: string
          format: date-time
          nullable: true
          description: Date/time when resolution was set.
        real_currency_available:
          type: boolean
        is_binary:
          type: boolean
          nullable: true
          description: If the question has only two outcomes.
        outcomes_type:
          allOf:
          - $ref: '#/components/schemas/OutcomesTypeEnum'
          description: |-
            This field defines how to render the market card.

            * `yesno` - Yes/No
            * `custom` - Custom names
        thumbnail:
          type: string
          readOnly: true
        wagers_count:
          type: integer
          readOnly: true
          description: Wagers count in play money
        wagers_count_canonical:
          type: integer
          readOnly: true
          description: Wagers count in real money
        volume_play_money:
          type: string
          readOnly: true
        volume_real_money:
          type: string
          readOnly: true
        is_following:
          type: string
          readOnly: true
        category:
          $ref: '#/components/schemas/CategoryBase'
        outcomes:
          type: array
          items:
            $ref: '#/components/schemas/Outcome'
        last_wager_real_money:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          description: 'Wager in real money that short selling will be applied. '
          readOnly: true
        last_wager_play_money:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          description: 'Wager in play money that short selling will be applied. '
          readOnly: true
        relevance:
          type: string
          readOnly: true
        hot:
          type: boolean
          description: Questions marked as hot earns relevance in feed.
      required:
      - category
      - id
      - is_following
      - last_wager_play_money
      - last_wager_real_money
      - outcomes
      - relevance
      - resolution
      - slug
      - status_display
      - tags
      - thumbnail
      - title
      - volume_play_money
      - volume_real_money
      - wagers_count
      - wagers_count_canonical
    MePrivatePublic:
      type: object
      properties:
        wallet:
          type: object
          additionalProperties: {}
          readOnly: true
          description: A dictionary containing all the currencies available in your
            wallet.
        username:
          type: string
          nullable: true
          maxLength: 50
          minLength: 3
          pattern: ^[-a-zA-Z0-9_]+$
        api_version:
          type: string
          readOnly: true
        date_joined:
          type: string
          format: date-time
        active_country:
          type: string
          readOnly: true
          nullable: true
          description: Country set from last IP user has accessed
        public_api_real_money_enabled:
          type: boolean
          title: Allow real money bets with public api
          readOnly: true
        wagers_count_play_money:
          type: integer
          readOnly: true
        wagers_count_real_money:
          type: integer
          readOnly: true
        residence_country:
          nullable: true
          title: Country of residence
          oneOf:
          - $ref: '#/components/schemas/ResidenceCountryEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
      required:
      - active_country
      - api_version
      - public_api_real_money_enabled
      - wagers_count_play_money
      - wagers_count_real_money
      - wallet
    NullEnum:
      enum:
      - null
    Outcome:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
        disabled:
          type: boolean
        price:
          type: number
          format: double
          maximum: 1000
          minimum: -1000
          exclusiveMaximum: true
          exclusiveMinimum: true
          nullable: true
          title: Calculated probability - play money
          readOnly: true
          description: Current price of the outcome
      required:
      - id
      - price
      - title
    OutcomesTypeEnum:
      enum:
      - yesno
      - custom
      type: string
      description: |-
        * `yesno` - Yes/No
        * `custom` - Custom names
    PaginatedBetListList:
      type: object
      properties:
        pagination:
          type: dict
          example:
            total: 40
            next: http://api.example.org/accounts/?p=20
            previous: 'null'
            page_size: 20
            offset: 0
        results:
          type: array
          items:
            $ref: '#/components/schemas/BetList'
    PaginatedCategoryListList:
      type: object
      properties:
        pagination:
          type: dict
          example:
            total: 40
            next: http://api.example.org/accounts/?p=20
            previous: 'null'
            page_size: 20
            offset: 0
        results:
          type: array
          items:
            $ref: '#/components/schemas/CategoryList'
    PaginatedLimitOrderList:
      type: object
      properties:
        pagination:
          type: dict
          example:
            total: 40
            next: http://api.example.org/accounts/?p=20
            previous: 'null'
            page_size: 20
            offset: 0
        results:
          type: array
          items:
            $ref: '#/components/schemas/LimitOrder'
    PaginatedMarketListList:
      type: object
      properties:
        pagination:
          type: dict
          example:
            total: 40
            next: http://api.example.org/accounts/?p=20
            previous: 'null'
            page_size: 20
            offset: 0
        results:
          type: array
          items:
            $ref: '#/components/schemas/MarketList'
    PatchedBetPartialSell:
      type: object
      properties:
        shares:
          type: number
          format: double
          maximum: 10000000000
          minimum: 0.0000000000010
          exclusiveMaximum: true
          description: Required only for partial sales. Specify the number of shares
            you want to sell. If no value is provided, the entire position will be
            sold. You will retain the remaining shares after the partial sale.
        amount:
          type: number
          format: double
          maximum: 10000000000
          minimum: 0
          exclusiveMaximum: true
          description: Required only for partial sales. Specify the amount you want
            to receive from selling the specified shares. Both 'shares' and 'amount'
            must be provided for a partial sale. If neither is provided, the entire
            position will be sold.Check get_partial_amount_on_sell endpoint for more
            details.
    PatchedLimitOrder:
      type: object
      properties:
        outcome:
          type: integer
        price:
          type: number
          format: double
          maximum: 0.99
          minimum: 0.01
          description: Limit price per share the user is willing to pay or receive.
        shares:
          type: number
          format: double
          maximum: 100000000
          minimum: -100000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          description: Number of shares unfilled in the order.
        currency:
          type: string
          maxLength: 11
        side:
          allOf:
          - $ref: '#/components/schemas/SideEnum'
          description: |-
            Order Type: 'bid' buy) to purchase or 'ask' (sell) to sell.

            * `bid` - Bid
            * `ask` - Ask
        position:
          allOf:
          - $ref: '#/components/schemas/PositionEnum'
          description: |-
            Position of the order: 'long' if you expect the outcome to occur, 'short' if you expect it not to occur.

            * `l` - long
            * `s` - short
    PositionEnum:
      enum:
      - l
      - s
      type: string
      description: |-
        * `l` - long
        * `s` - short
    Rates:
      type: object
      properties:
        rates:
          nullable: true
          readOnly: true
        currency:
          type: string
          maxLength: 11
        last_update:
          type: string
          format: date-time
          readOnly: true
      required:
      - last_update
      - rates
    RelatedQuestion:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 150
        wagers_count:
          type: integer
          readOnly: true
          description: Wagers count in play money
        wagers_count_canonical:
          type: integer
          readOnly: true
          description: Wagers count in real money
        volume_play_money:
          type: string
          readOnly: true
        volume_real_money:
          type: string
          readOnly: true
        bet_end_date:
          type: string
          format: date-time
          nullable: true
          description: Date/time to end betting.
        event_start_date:
          type: string
          format: date-time
          nullable: true
      required:
      - id
      - title
      - volume_play_money
      - volume_real_money
      - wagers_count
      - wagers_count_canonical
    ResidenceCountryEnum:
      enum:
      - AF
      - AX
      - AL
      - DZ
      - AS
      - AD
      - AO
      - AI
      - AQ
      - AG
      - AR
      - AM
      - AW
      - AU
      - AT
      - AZ
      - BS
      - BH
      - BD
      - BB
      - BY
      - BE
      - BZ
      - BJ
      - BM
      - BT
      - BO
      - BQ
      - BA
      - BW
      - BV
      - BR
      - IO
      - VG
      - BN
      - BG
      - BF
      - BI
      - KH
      - CM
      - CA
      - CV
      - KY
      - CF
      - TD
      - CL
      - CN
      - CX
      - CC
      - CO
      - KM
      - CK
      - CR
      - HR
      - CU
      - CW
      - CY
      - CZ
      - CD
      - DK
      - DJ
      - DM
      - DO
      - TL
      - EC
      - EG
      - SV
      - GQ
      - ER
      - EE
      - ET
      - FK
      - FO
      - FJ
      - FI
      - FR
      - GF
      - PF
      - TF
      - GA
      - GM
      - GE
      - DE
      - GH
      - GI
      - GR
      - GL
      - GD
      - GP
      - GU
      - GT
      - GG
      - GN
      - GW
      - GY
      - HT
      - HM
      - HN
      - HK
      - HU
      - IS
      - IN
      - ID
      - IR
      - IQ
      - IE
      - IM
      - IL
      - IT
      - CI
      - JM
      - JP
      - JE
      - JO
      - KZ
      - KE
      - KI
      - XK
      - KW
      - KG
      - LA
      - LV
      - LB
      - LS
      - LR
      - LY
      - LI
      - LT
      - LU
      - MO
      - MK
      - MG
      - MW
      - MY
      - MV
      - ML
      - MT
      - MH
      - MQ
      - MR
      - MU
      - YT
      - MX
      - FM
      - MD
      - MC
      - MN
      - ME
      - MS
      - MA
      - MZ
      - MM
      - NA
      - NR
      - NP
      - NL
      - NC
      - NZ
      - NI
      - NE
      - NG
      - NU
      - NF
      - KP
      - MP
      - 'NO'
      - OM
      - PK
      - PW
      - PS
      - PA
      - PG
      - PY
      - PE
      - PH
      - PN
      - PL
      - PT
      - PR
      - QA
      - CG
      - RE
      - RO
      - RU
      - RW
      - BL
      - SH
      - KN
      - LC
      - MF
      - PM
      - VC
      - WS
      - SM
      - ST
      - SA
      - SN
      - RS
      - SC
      - SL
      - SG
      - SX
      - SK
      - SI
      - SB
      - SO
      - ZA
      - GS
      - KR
      - SS
      - ES
      - LK
      - SD
      - SR
      - SJ
      - SZ
      - SE
      - CH
      - SY
      - TW
      - TJ
      - TZ
      - TH
      - TG
      - TK
      - TO
      - TT
      - TN
      - TR
      - TM
      - TC
      - TV
      - VI
      - UG
      - UA
      - AE
      - GB
      - US
      - UM
      - UY
      - UZ
      - VU
      - VA
      - VE
      - VN
      - WF
      - EH
      - YE
      - ZM
      - ZW
      type: string
      description: "* `AF` - Afghanistan\n* `AX` - Aland Islands\n* `AL` - Albania\n\
        * `DZ` - Algeria\n* `AS` - American Samoa\n* `AD` - Andorra\n* `AO` - Angola\n\
        * `AI` - Anguilla\n* `AQ` - Antarctica\n* `AG` - Antigua and Barbuda\n* `AR`\
        \ - Argentina\n* `AM` - Armenia\n* `AW` - Aruba\n* `AU` - Australia\n* `AT`\
        \ - Austria\n* `AZ` - Azerbaijan\n* `BS` - Bahamas\n* `BH` - Bahrain\n* `BD`\
        \ - Bangladesh\n* `BB` - Barbados\n* `BY` - Belarus\n* `BE` - Belgium\n* `BZ`\
        \ - Belize\n* `BJ` - Benin\n* `BM` - Bermuda\n* `BT` - Bhutan\n* `BO` - Bolivia\n\
        * `BQ` - Bonaire, Saint Eustatius and Saba \n* `BA` - Bosnia and Herzegovina\n\
        * `BW` - Botswana\n* `BV` - Bouvet Island\n* `BR` - Brazil\n* `IO` - British\
        \ Indian Ocean Territory\n* `VG` - British Virgin Islands\n* `BN` - Brunei\n\
        * `BG` - Bulgaria\n* `BF` - Burkina Faso\n* `BI` - Burundi\n* `KH` - Cambodia\n\
        * `CM` - Cameroon\n* `CA` - Canada\n* `CV` - Cape Verde\n* `KY` - Cayman Islands\n\
        * `CF` - Central African Republic\n* `TD` - Chad\n* `CL` - Chile\n* `CN` -\
        \ China\n* `CX` - Christmas Island\n* `CC` - Cocos Islands\n* `CO` - Colombia\n\
        * `KM` - Comoros\n* `CK` - Cook Islands\n* `CR` - Costa Rica\n* `HR` - Croatia\n\
        * `CU` - Cuba\n* `CW` - Curacao\n* `CY` - Cyprus\n* `CZ` - Czech Republic\n\
        * `CD` - Democratic Republic of the Congo\n* `DK` - Denmark\n* `DJ` - Djibouti\n\
        * `DM` - Dominica\n* `DO` - Dominican Republic\n* `TL` - East Timor\n* `EC`\
        \ - Ecuador\n* `EG` - Egypt\n* `SV` - El Salvador\n* `GQ` - Equatorial Guinea\n\
        * `ER` - Eritrea\n* `EE` - Estonia\n* `ET` - Ethiopia\n* `FK` - Falkland Islands\n\
        * `FO` - Faroe Islands\n* `FJ` - Fiji\n* `FI` - Finland\n* `FR` - France\n\
        * `GF` - French Guiana\n* `PF` - French Polynesia\n* `TF` - French Southern\
        \ Territories\n* `GA` - Gabon\n* `GM` - Gambia\n* `GE` - Georgia\n* `DE` -\
        \ Germany\n* `GH` - Ghana\n* `GI` - Gibraltar\n* `GR` - Greece\n* `GL` - Greenland\n\
        * `GD` - Grenada\n* `GP` - Guadeloupe\n* `GU` - Guam\n* `GT` - Guatemala\n\
        * `GG` - Guernsey\n* `GN` - Guinea\n* `GW` - Guinea-Bissau\n* `GY` - Guyana\n\
        * `HT` - Haiti\n* `HM` - Heard Island and McDonald Islands\n* `HN` - Honduras\n\
        * `HK` - Hong Kong\n* `HU` - Hungary\n* `IS` - Iceland\n* `IN` - India\n*\
        \ `ID` - Indonesia\n* `IR` - Iran\n* `IQ` - Iraq\n* `IE` - Ireland\n* `IM`\
        \ - Isle of Man\n* `IL` - Israel\n* `IT` - Italy\n* `CI` - Ivory Coast\n*\
        \ `JM` - Jamaica\n* `JP` - Japan\n* `JE` - Jersey\n* `JO` - Jordan\n* `KZ`\
        \ - Kazakhstan\n* `KE` - Kenya\n* `KI` - Kiribati\n* `XK` - Kosovo\n* `KW`\
        \ - Kuwait\n* `KG` - Kyrgyzstan\n* `LA` - Laos\n* `LV` - Latvia\n* `LB` -\
        \ Lebanon\n* `LS` - Lesotho\n* `LR` - Liberia\n* `LY` - Libya\n* `LI` - Liechtenstein\n\
        * `LT` - Lithuania\n* `LU` - Luxembourg\n* `MO` - Macao\n* `MK` - Macedonia\n\
        * `MG` - Madagascar\n* `MW` - Malawi\n* `MY` - Malaysia\n* `MV` - Maldives\n\
        * `ML` - Mali\n* `MT` - Malta\n* `MH` - Marshall Islands\n* `MQ` - Martinique\n\
        * `MR` - Mauritania\n* `MU` - Mauritius\n* `YT` - Mayotte\n* `MX` - Mexico\n\
        * `FM` - Micronesia\n* `MD` - Moldova\n* `MC` - Monaco\n* `MN` - Mongolia\n\
        * `ME` - Montenegro\n* `MS` - Montserrat\n* `MA` - Morocco\n* `MZ` - Mozambique\n\
        * `MM` - Myanmar\n* `NA` - Namibia\n* `NR` - Nauru\n* `NP` - Nepal\n* `NL`\
        \ - Netherlands\n* `NC` - New Caledonia\n* `NZ` - New Zealand\n* `NI` - Nicaragua\n\
        * `NE` - Niger\n* `NG` - Nigeria\n* `NU` - Niue\n* `NF` - Norfolk Island\n\
        * `KP` - North Korea\n* `MP` - Northern Mariana Islands\n* `NO` - Norway\n\
        * `OM` - Oman\n* `PK` - Pakistan\n* `PW` - Palau\n* `PS` - Palestinian Territory\n\
        * `PA` - Panama\n* `PG` - Papua New Guinea\n* `PY` - Paraguay\n* `PE` - Peru\n\
        * `PH` - Philippines\n* `PN` - Pitcairn\n* `PL` - Poland\n* `PT` - Portugal\n\
        * `PR` - Puerto Rico\n* `QA` - Qatar\n* `CG` - Republic of the Congo\n* `RE`\
        \ - Reunion\n* `RO` - Romania\n* `RU` - Russia\n* `RW` - Rwanda\n* `BL` -\
        \ Saint Barthelemy\n* `SH` - Saint Helena\n* `KN` - Saint Kitts and Nevis\n\
        * `LC` - Saint Lucia\n* `MF` - Saint Martin\n* `PM` - Saint Pierre and Miquelon\n\
        * `VC` - Saint Vincent and the Grenadines\n* `WS` - Samoa\n* `SM` - San Marino\n\
        * `ST` - Sao Tome and Principe\n* `SA` - Saudi Arabia\n* `SN` - Senegal\n\
        * `RS` - Serbia\n* `SC` - Seychelles\n* `SL` - Sierra Leone\n* `SG` - Singapore\n\
        * `SX` - Sint Maarten\n* `SK` - Slovakia\n* `SI` - Slovenia\n* `SB` - Solomon\
        \ Islands\n* `SO` - Somalia\n* `ZA` - South Africa\n* `GS` - South Georgia\
        \ and the South Sandwich Islands\n* `KR` - South Korea\n* `SS` - South Sudan\n\
        * `ES` - Spain\n* `LK` - Sri Lanka\n* `SD` - Sudan\n* `SR` - Suriname\n* `SJ`\
        \ - Svalbard and Jan Mayen\n* `SZ` - Swaziland\n* `SE` - Sweden\n* `CH` -\
        \ Switzerland\n* `SY` - Syria\n* `TW` - Taiwan\n* `TJ` - Tajikistan\n* `TZ`\
        \ - Tanzania\n* `TH` - Thailand\n* `TG` - Togo\n* `TK` - Tokelau\n* `TO` -\
        \ Tonga\n* `TT` - Trinidad and Tobago\n* `TN` - Tunisia\n* `TR` - Turkey\n\
        * `TM` - Turkmenistan\n* `TC` - Turks and Caicos Islands\n* `TV` - Tuvalu\n\
        * `VI` - U.S. Virgin Islands\n* `UG` - Uganda\n* `UA` - Ukraine\n* `AE` -\
        \ United Arab Emirates\n* `GB` - United Kingdom\n* `US` - United States\n\
        * `UM` - United States Minor Outlying Islands\n* `UY` - Uruguay\n* `UZ` -\
        \ Uzbekistan\n* `VU` - Vanuatu\n* `VA` - Vatican\n* `VE` - Venezuela\n* `VN`\
        \ - Vietnam\n* `WF` - Wallis and Futuna\n* `EH` - Western Sahara\n* `YE` -\
        \ Yemen\n* `ZM` - Zambia\n* `ZW` - Zimbabwe"
    SideEnum:
      enum:
      - bid
      - ask
      type: string
      description: |-
        * `bid` - Bid
        * `ask` - Ask
    Status6baEnum:
      enum:
      - l
      - p
      - s
      - w
      - x
      - d
      type: string
      description: |-
        * `l` - lost
        * `p` - purchased
        * `s` - sold
        * `w` - won
        * `x` - cancelled
        * `d` - disabled
    StatusBf3Enum:
      enum:
      - o
      - s
      - c
      - x
      - p
      - r
      type: string
      description: |-
        * `o` - open
        * `s` - stopped
        * `c` - resolved
        * `x` - cancelled
        * `p` - paused
        * `r` - reversed
    SuggestOutcome:
      type: object
      properties:
        title:
          type: string
          maxLength: 150
        price:
          type: number
          format: double
          maximum: 0.99
          minimum: 0.01
    SuggetMarket:
      type: object
      properties:
        title:
          type: string
          maxLength: 150
        description:
          type: string
          maxLength: 800
        category:
          type: string
          maxLength: 75
        end_bet_date:
          type: string
          format: date-time
        outcomes:
          type: array
          items:
            $ref: '#/components/schemas/SuggestOutcome'
          minItems: 2
      required:
      - description
      - title
    Tag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 150
        slug:
          type: string
          readOnly: true
          description: The slug is used to populate the URLs.
          pattern: ^[-a-zA-Z0-9_]+$
      required:
      - id
      - name
      - slug
    UserBasic:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          nullable: true
          maxLength: 50
          minLength: 3
          pattern: ^[-a-zA-Z0-9_]+$
        picture:
          type: string
          format: uri
      required:
      - id
  securitySchemes:
    HMAC:
      type: apiKey
      in: header
      name: See Authentication section
servers:
- url: https://api.futuur.com
  description: Text
